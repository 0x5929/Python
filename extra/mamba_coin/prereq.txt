			TITLE:
				MAMBACOIN WITH PYTHON			
			
			BACKGROUND:
					CRYPTOCURRENCY USING BLOCKCHAIN TECHNOLOGY

			
			PROBLEM DEFINITION:
					NEED A WAY TO ADD OTHER NODES. AND SYNC EFFECTIVELY THAT HAVE THE TECHNOLGOY 
					ALSO CONTAIN THE REST OF THE CRYPTO STANDARD FEATURES
					SUCH AS MINING NEW COINS USING PROOF OF WORK, AND SYNCING WITH OTHER NODES ON THE SAME NETWORK


			SOLUTION REQUIREMENTS:
					- WELL DEFINED BLOCK STRUCTURE, WITH GENESIS BLOCK CREATION
					
				SERVER NEEDS TO HAVE THIS AVAILABLE OPERATIONS 
					- RETRIEVE BLOCKCHAIN FROM SERVER
					- MINE AND SUBMIT BLOCK TO SERVER (WITH SIMPLE PROOF OF WORK)
					- ADDING URLS OF OTHER NODES ON NETWORK (IMPLEMENT AN ADDITIONAL SERVER JUST FOR NODE LISTS)
					- RETRIEVING BLOCKCHAIN FROM OTHER NODES
					- HAVING A CONSENSUS OF ALL CHAINS, AND SYNCING 

			ARCHITECTURE:
				SOFTWARE REQUIREMENTS:
					- FLASK --> HTTP SERVER 
					- REQUESTS --> HTTP REQUESTS
					- JSON --> JSON OPERATIOHS
					- HASH --> OUR HASHER
					- DATETIME --> TIME OPERATIONS
				MAJOR CLASSES:
					BLOCK CLASS: RESPONSIBLE FOR BLOCK STRUCTURE
					HELPER CLASS: RESPONSIBLE FOR BLOCK, AND SERVER OPERATIONS? (COULD BE SPLIT BETWEEN THE TWO)
					SERVER CLASS: RESPONSIBLE FOR SETTING UP SERVER AND RUNNING IT WITH DESIRED CONFIGS
				INTERACTIONS BETWEEN CLASSES: 
					THE SERVER CLASS WILL UTITLIZE THE HELPER TO WORK WITH BLOCK CLASS
				
				MORE DETAILED DESIGN AND CLASS DIAGRAMS CAN ALSO BE DRAWN OUT
		
				DIRECTORY STRUCTURE:
					- __init__.py
					- prereq.txt
					- server.py
					- tests/
						- test.py
					- resources/
						- block.py
						- helper.py

					
